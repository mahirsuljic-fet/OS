Proces je okruzenje koje stvori OS (kernel) u kojem ce se izvrsavati (jedna) aplikacija.
OS stvara iluziju aplikaciji da ona ima svoju jezgru (procesor) i kompletnu memoriju za sebe (kompletan adresni prostor).

Registri opste namjene su 32 bitni.

%ax, %bc, ... su 16-bit virtuelni registri
Registri koji zavrsavaju sa x (%eax, %ebx, %ecx, %edx) imaju i h (high) i l (low) pristup 
(najnizih i najvisih 8 bita datog virtuelog registra, npr. %al je najnizih 8 bita virtuelnog registra %ax, odnosno registra %eax).

Registar %eip sluzi kao programski brojac ($pc u MIPS32).

Prilikom izvrsenja svake instrukcije obavezno ce se promijeniti (postaviti na neku vrijednost, mozda istu cak, ali se postavi na nesto) 
neki flag unutar registra eflags (Amer reko BITNO).

Postoje dvije strategije virtualizacije memorije: stranicenje i segmentiranje.
Stranicenje se pokazalo boljim, ali na intel platformi je neophodno poznavati i segmentiranje.
Segmentni registri postoje zbog virtualizacije memorije.
Segmentni registri su 16-bitni.

Koristit cemo AT&T asembler notaciju.
Nazalost vecina literature koristi Intel notaciju, ali se AT&T cesce koristi.

Instrukcije se mogu korsititi i bez sufiksa (b, w i l), ali bolje ne koristit ako ne znas tacno sta radis, mogu se cudne stvari desit.

U instrukcijama prvi argument je source, a drugi je najcesce i source i destinacija.
Operandi mogu biti registri, memorijska lokacija ili konstante.
Drugi operand ne moze biti konstanta jer se u konstantu ne mogu spremit podaci.

Registri imaju prefiks %
Konstante imaju prefiks $
Adrese nemaju prefiks

Ne mogu istovremeno oba operanda instrukcije biti memorijske adrese, ali moze ili prva ili druga.

Insturkcija lea izvrsi izraz koji je prvi operand i smjesti ga na lokaciju koju predstavlja drui operand.
GRESKA NA SLAJDU: U instrukciji lea source mora biti memorijska lokacija, a destinacija mora biti registar.

Intel arhitektura vrsi pristup memoriji u vise faza, za razliku od MIPS32.
Na intel arhitekturi nema odgodjeni slot.

Registar %ebp ($fp u MIPS32) treba da pokazuje na pocetak stack frame-a funkcije koja se trenunto izvrsava, 
a registar %esp ($sp u MIPS32) na kraj stack frame-a funkcije koja se trenutno izvrsava (dno stack-a).

PREZERVIRANI registri su:   %ebp, %ebx, %esi, %edi
NEPREZERVIRANI registri su: %eax, %ecx, %edx

Na intel arhitekturi funkciju pozivamo sa instrukcijom call, pri cemu se povratna adresa sprema na kraj stack-a.
U caller funkciju vracamo se pomocu instrukcije ret (bez argumenta), 
ali prije instrukcije ret mora se vratiti stack na stanje kakvo je bilo prije poziva funkcije.

Svi argumenti su na stacku od callera.
Argumenti se redaju na takav nacin da se zadnji argument prvi stavlja na stack (prvi argument bude zadnji na stack-u).
POVRATNA VRIJEDNOST funkcije se sprema u registar %eax.

Prvo sto pozvana funkcija treba uraditi je da spremi vrijednost %ebp na stack, a zatim postavi vrijednost %ebp na vrijednost iz %esp. (PROLOG funkcije)
Postoji instrukcija enter koja radi ovo prethodno navedeno.

Zadnje sto pozvana funkcija treba uraditi je da postavi vrijednost u %esp na vrijednost iz %ebp, 
uradi popl %ebp da vrati %ebp na pocetak stack frame-a caller funkcije, a zatim se radi instrukcija ret. (EPILOG funkcije)
Postoji instrukcija leave koja radi ovo prethodno navedeno.
